{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"../services/authService\";\nimport blogService from \"../services/blogService\";\nconst initialState = {\n  author: null,\n  authorBlogs: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n};\n\n// Fetch Author\nexport const fetchAuthor = createAsyncThunk(\"auth/fetchAuthor\", async (userData, thunkAPI) => {\n  try {\n    return await authService.getUser(userData);\n  } catch (error) {\n    const message = error.message || error;\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const fetchBlogsByAuthorId = createAsyncThunk(\"blogs/fetchBlogsByAuthorId\", async (authorId, thunkAPI) => {\n  try {\n    return await blogService.fetchBlogsByAuthorId(authorId);\n  } catch (error) {\n    const message = error.message || error;\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: \"author\",\n  initialState,\n  reducers: {\n    reset: state => initialState,\n    resetSuccessAndError: state => {\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAuthor.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchAuthor.fulfilled, (state, {\n      payload\n    }) => {\n      state.author = payload.data;\n      state.isLoading = false;\n      // state.isSuccess = true;\n      state.isError = false;\n      // state.message = payload.message;\n    }).addCase(fetchAuthor.rejected, (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = true;\n      state.message = payload;\n    }).addCase(fetchBlogsByAuthorId.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchBlogsByAuthorId.fulfilled, (state, {\n      payload\n    }) => {\n      state.authorBlogs = payload.data;\n      state.isLoading = false;\n      // state.isSuccess = true;\n      state.isError = false;\n      // state.message = payload.message;\n    }).addCase(fetchBlogsByAuthorId.rejected, (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = true;\n      state.message = payload.message;\n    });\n  }\n});\nexport const {\n  reset,\n  resetSuccessAndError\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","blogService","initialState","author","authorBlogs","isError","isSuccess","isLoading","message","fetchAuthor","userData","thunkAPI","getUser","error","rejectWithValue","fetchBlogsByAuthorId","authorId","authSlice","name","reducers","reset","state","resetSuccessAndError","extraReducers","builder","addCase","pending","fulfilled","payload","data","rejected","actions","reducer"],"sources":["/Users/erucuh/Downloads/Coding4Fun/IX/CapstoneBlogApp/BlogApp/Frontend/src/features/authorSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport authService from \"../services/authService\";\nimport blogService from \"../services/blogService\";\n\nconst initialState = {\n  author: null,\n  authorBlogs: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\",\n};\n\n// Fetch Author\nexport const fetchAuthor = createAsyncThunk(\n  \"auth/fetchAuthor\",\n  async (userData, thunkAPI) => {\n    try {\n      return await authService.getUser(userData);\n    } catch (error) {\n      const message = error.message || error;\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\nexport const fetchBlogsByAuthorId = createAsyncThunk(\n  \"blogs/fetchBlogsByAuthorId\",\n  async (authorId, thunkAPI) => {\n    try {\n\n      return await blogService.fetchBlogsByAuthorId(authorId);\n    } catch (error) {\n      const message = error.message || error;\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nexport const authSlice = createSlice({\n  name: \"author\",\n  initialState,\n  reducers: {\n    reset: (state) => initialState,\n    resetSuccessAndError: (state) => {\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = \"\";\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAuthor.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(fetchAuthor.fulfilled, (state, { payload }) => {\n        state.author = payload.data;\n        state.isLoading = false;\n        // state.isSuccess = true;\n        state.isError = false;\n        // state.message = payload.message;\n      })\n      .addCase(fetchAuthor.rejected, (state, { payload }) => {\n        state.isLoading = false;\n        state.isSuccess = false;\n        state.isError = true;\n        state.message = payload;\n      })\n      .addCase(fetchBlogsByAuthorId.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(fetchBlogsByAuthorId.fulfilled, (state, { payload }) => {\n        state.authorBlogs = payload.data;\n        state.isLoading = false;\n        // state.isSuccess = true;\n        state.isError = false;\n        // state.message = payload.message;\n      })\n      .addCase(fetchBlogsByAuthorId.rejected, (state, { payload }) => {\n        state.isLoading = false;\n        state.isSuccess = false;\n        state.isError = true;\n        state.message = payload.message;\n      });\n  },\n});\n\nexport const { reset, resetSuccessAndError } = authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}