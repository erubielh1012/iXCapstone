{"ast":null,"code":"const createBlog = async blog => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: blog\n  });\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n  const responseData = await response.json();\n  return responseData;\n};\nconst fetchBlogs = async () => {\n  try {\n    console.log(\"Trying to grab all Blogs\");\n    const response = await fetch(\"http://localhost:8000/api/blogs\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // if (!response.ok) {\n    //   let res = await response.json();\n    //   throw res;\n    // }\n\n    // const responseData = await response.json();\n    // return responseData;\n\n    let blogsApiData = await response.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.response;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst fetchBlogById = async id => {\n  try {\n    // console.log(\"Trying to grab all Blogs\")\n    const data = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // if (!response.ok) {\n    //   let res = await response.json();\n    //   throw res;\n    // }\n\n    // const responseData = await response.json();\n    // return responseData;\n\n    let blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst fetchBlogsByCategoryId = async categoryId => {\n  try {\n    console.log(\"Trying to grab filtered blogs by cats ID\");\n    const data = await fetch(\"http://localhost:8000/api/blogs/category/\" + categoryId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // if (!response.ok) {\n    //   let res = await response.json();\n    //   throw res;\n    // }\n\n    // const responseData = await response.json();\n    // return responseData;\n\n    const blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst fetchBlogsByAuthorId = async authorId => {\n  try {\n    console.log(\"Trying to grab filtered blogs by cats ID\");\n    const data = await fetch(\"http://localhost:8000/api/blogs/category/\" + authorId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // if (!response.ok) {\n    //   let res = await response.json();\n    //   throw res;\n    // }\n\n    // const responseData = await response.json();\n    // return responseData;\n\n    const blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst updateBlogById = async blog => {\n  try {\n    // console.log(\"Trying to grab all Blogs\")\n    const data = await fetch(\"http://localhost:8000/api/blogs/\" + blog.get(\"id\"), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: blog\n    });\n\n    // if (!response.ok) {\n    //   let res = await response.json();\n    //   throw res;\n    // }\n\n    // const responseData = await response.json();\n    // return responseData;\n\n    let blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst deleteBlogById = async id => {\n  try {\n    // console.log(\"Trying to grab all Blogs\")\n    const data = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // if (!response.ok) {\n    //   let res = await response.json();\n    //   throw res;\n    // }\n\n    // const responseData = await response.json();\n    // return responseData;\n\n    let blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogById,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlogById,\n  deleteBlogById\n};\nexport default blogService;","map":{"version":3,"names":["createBlog","blog","response","fetch","method","headers","body","ok","res","json","responseData","fetchBlogs","console","log","blogsApiData","message","error","Error","fetchBlogById","id","data","fetchBlogsByCategoryId","categoryId","fetchBlogsByAuthorId","authorId","updateBlogById","get","deleteBlogById","blogService"],"sources":["/Users/erucuh/Downloads/Coding4Fun/IX/BlogApp/Frontend/src/services/blogService.js"],"sourcesContent":["\nconst createBlog = async (blog) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs\", \n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: blog,\n    });\n\n    if (!response.ok) {\n      let res = await response.json();\n      throw res;\n    }\n\n    const responseData = await response.json();\n    return responseData;\n};\n\nconst fetchBlogs = async () => {\n  try {\n    console.log(\"Trying to grab all Blogs\")\n    const response = await fetch(\n      \"http://localhost:8000/api/blogs\",\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // if (!response.ok) {\n      //   let res = await response.json();\n      //   throw res;\n      // }\n  \n      // const responseData = await response.json();\n      // return responseData;\n      \n    let blogsApiData = await response.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.response;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nconst fetchBlogById = async (id) => {\n  try {\n    // console.log(\"Trying to grab all Blogs\")\n    const data = await fetch(\n      \"http://localhost:8000/api/blogs/\" + id,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // if (!response.ok) {\n      //   let res = await response.json();\n      //   throw res;\n      // }\n  \n      // const responseData = await response.json();\n      // return responseData;\n      \n    let blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nconst fetchBlogsByCategoryId = async ( categoryId ) => {\n  try {\n    console.log(\"Trying to grab filtered blogs by cats ID\")\n\n    const data = await fetch(\n      (\"http://localhost:8000/api/blogs/category/\" + categoryId),\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // if (!response.ok) {\n      //   let res = await response.json();\n      //   throw res;\n      // }\n  \n      // const responseData = await response.json();\n      // return responseData;\n\n    const blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch(error) {\n    throw new Error(error);\n  }\n}\n\nconst fetchBlogsByAuthorId = async ( authorId ) => {\n  try {\n    console.log(\"Trying to grab filtered blogs by cats ID\")\n\n    const data = await fetch(\n      (\"http://localhost:8000/api/blogs/category/\" + authorId),\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // if (!response.ok) {\n      //   let res = await response.json();\n      //   throw res;\n      // }\n  \n      // const responseData = await response.json();\n      // return responseData;\n\n    const blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch(error) {\n    throw new Error(error);\n  }\n}\n\n\nconst updateBlogById = async (blog) => {\n  try {\n    // console.log(\"Trying to grab all Blogs\")\n    const data = await fetch(\n      \"http://localhost:8000/api/blogs/\" + blog.get(\"id\"),\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: blog,\n      });\n\n      // if (!response.ok) {\n      //   let res = await response.json();\n      //   throw res;\n      // }\n  \n      // const responseData = await response.json();\n      // return responseData;\n      \n    let blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nconst deleteBlogById = async (id) => {\n  try {\n    // console.log(\"Trying to grab all Blogs\")\n    const data = await fetch(\n      \"http://localhost:8000/api/blogs/\" + id,\n      {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // if (!response.ok) {\n      //   let res = await response.json();\n      //   throw res;\n      // }\n  \n      // const responseData = await response.json();\n      // return responseData;\n      \n    let blogsApiData = await data.json();\n    console.log(blogsApiData.message);\n    return blogsApiData.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nconst blogService = {\n  createBlog,\n  fetchBlogs, \n  fetchBlogById,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlogById,\n  deleteBlogById,\n};\n  \n  export default blogService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}