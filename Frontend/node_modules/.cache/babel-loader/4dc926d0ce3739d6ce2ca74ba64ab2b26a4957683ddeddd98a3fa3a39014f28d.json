{"ast":null,"code":"const createBlog = async blog => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong!\");\n      throw error.message;\n    }\n  }\n  ;\n  const responseData = await response.json();\n  return responseData;\n};\nconst fetchBlogs = async () => {\n  console.log(\"Trying to grab all Blogs\");\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\");\n      throw new Error(error);\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogById = async id => {\n  const data = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!data.ok) {\n    try {\n      let blogsApiData = await data.json();\n      throw blogsApiData.message || console.log(blogsApiData);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\");\n      throw new Error(error);\n    }\n  }\n};\nconst fetchBlogsByCategoryId = async categoryId => {\n  console.log(\"Trying to grab filtered blogs by cats ID\");\n  const data = await fetch(\"http://localhost:8000/api/blogs/category/\" + categoryId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!data.ok) {\n    try {\n      let res = await data.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\");\n      throw new Error(error);\n    }\n  }\n  const blogsApiData = await data.json();\n  return blogsApiData.data;\n};\nconst fetchBlogsByAuthorId = async authorId => {\n  console.log(\"Trying to grab filtered blogs by cats ID\");\n  const data = await fetch(\"http://localhost:8000/api/blogs/category/\" + authorId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!data.ok) {\n    try {\n      let res = await data.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\");\n      throw new Error(error);\n    }\n  }\n  const responseData = await data.json();\n  return responseData;\n};\nconst updateBlogById = async blog => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + blog.id, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst deleteBlogById = async id => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogById,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlogById,\n  deleteBlogById\n};\nexport default blogService;","map":{"version":3,"names":["createBlog","blog","response","fetch","method","headers","body","JSON","stringify","ok","res","json","message","console","log","err","error","Error","responseData","fetchBlogs","blogsApiData","fetchBlogById","id","data","fetchBlogsByCategoryId","categoryId","fetchBlogsByAuthorId","authorId","updateBlogById","deleteBlogById","blogService"],"sources":["/Users/erucuh/Downloads/Coding4Fun/IX/CapstoneBlogApp/BlogApp/Frontend/src/services/blogService.js"],"sourcesContent":["\nconst createBlog = async (blog) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs\", \n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(blog),\n    });\n\n    if (!response.ok) {\n      try {\n        let res = await response.json();\n        throw res.message || console.log(res);\n      } catch (err) {\n        console.log(err);\n        const error = new Error(\"Something went wrong!\");\n        throw error.message;\n      }\n    };\n\n    const responseData = await response.json();\n    return responseData;\n};\n\nconst fetchBlogs = async () => {\n  console.log(\"Trying to grab all Blogs\")\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs\",\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n  if (!response.ok) {\n    try {    \n      let res = await response.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\")\n      throw new Error(error);\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogById = async (id) => {\n  const data = await fetch(\n    \"http://localhost:8000/api/blogs/\" + id,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n  if (!data.ok) {\n    try {\n      let blogsApiData = await data.json();\n      throw blogsApiData.message || console.log(blogsApiData);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\")\n      throw new Error(error);\n    }\n  }\n}\n\nconst fetchBlogsByCategoryId = async ( categoryId ) => {\n  console.log(\"Trying to grab filtered blogs by cats ID\")\n\n  const data = await fetch(\n    \"http://localhost:8000/api/blogs/category/\" + categoryId,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!data.ok) {\n      try {\n        let res = await data.json();\n        throw res.message || console.log(res);\n      } catch(err) {\n        const error = new Error(\"Something went wrong\");\n        throw new Error(error);\n      }\n    }\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n};\n\nconst fetchBlogsByAuthorId = async ( authorId ) => {\n  console.log(\"Trying to grab filtered blogs by cats ID\")\n\n  const data = await fetch(\n    (\"http://localhost:8000/api/blogs/category/\" + authorId),\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n  if (!data.ok) {\n    try {\n      let res = await data.json();\n      throw res.message || console.log(res);\n    } catch(err) {\n      const error = new Error(\"Something went wrong\");\n      throw new Error(error);\n    }\n  }\n\n  const responseData = await data.json();\n  return responseData;\n}\n\n\nconst updateBlogById = async (blog) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + blog.id, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(blog),\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst deleteBlogById = async (id) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst blogService = {\n  createBlog,\n  fetchBlogs, \n  fetchBlogById,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlogById,\n  deleteBlogById,\n};\n  \n  export default blogService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}