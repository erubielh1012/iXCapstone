{"ast":null,"code":"const createCategory = async category => {\n  console.log(\"You are creating a new category!\");\n  const response = await fetch(\"http://localhost:8000/api/categories\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(category)\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const responseData = await response.json();\n  return responseData;\n};\nconst fetchCategories = async () => {\n  const response = await fetch(\"http://localhost:8000/api/categories\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const categoriesApiData = await response.json();\n  return categoriesApiData;\n};\nconst updateCategory = async category => {\n  const data = await fetch(\"http://localhost:8000/api/categories/\" + category.get(\"id\"), {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: category\n  });\n  if (!data.ok) {\n    try {\n      let res = await data.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const categoriesApiData = await data.json();\n  return categoriesApiData;\n};\nconst deleteCategory = async id => {\n  const response = await fetch(\"http://localhost:8000/api/categories/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const categoriesApiData = await response.json();\n  return categoriesApiData;\n};\nconst categoryService = {\n  createCategory,\n  fetchCategories,\n  updateCategory,\n  deleteCategory\n};\nexport default categoryService;","map":{"version":3,"names":["createCategory","category","console","log","response","fetch","method","headers","body","JSON","stringify","ok","res","json","message","err","error","Error","responseData","fetchCategories","categoriesApiData","updateCategory","data","get","deleteCategory","id","categoryService"],"sources":["/Users/erucuh/Downloads/Coding4Fun/IX/CapstoneBlogApp/BlogApp/Frontend/src/services/categoryService.js"],"sourcesContent":["const createCategory = async (category) => {\n  console.log(\"You are creating a new category!\")\n  const response = await fetch(\n    \"http://localhost:8000/api/categories\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(category),\n    });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const responseData = await response.json();\n  return responseData;\n};\n\nconst fetchCategories = async () => {\n  const response = await fetch(\"http://localhost:8000/api/categories\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const categoriesApiData = await response.json();\n  return categoriesApiData;\n};\n\nconst updateCategory = async (category) => {\n  const data = await fetch(\n    \"http://localhost:8000/api/categories/\" + category.get(\"id\"),\n    {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: category\n    });\n\n  if (!data.ok) {\n    try {\n      let res = await data.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const categoriesApiData = await data.json();\n  return categoriesApiData;\n};\n\n  const deleteCategory = async (id) => {\n    const response = await fetch(\n      \"http://localhost:8000/api/categories/\" + id,\n      {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n    if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const categoriesApiData = await response.json();\n  return categoriesApiData;\n  };\n  \n  const categoryService = {\n    createCategory,\n    fetchCategories,\n    updateCategory,\n    deleteCategory,\n  };\n\n  export default categoryService;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}