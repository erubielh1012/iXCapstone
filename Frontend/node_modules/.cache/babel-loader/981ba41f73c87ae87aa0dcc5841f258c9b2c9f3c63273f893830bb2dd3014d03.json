{"ast":null,"code":"const createBlog=async blog=>{const response=await fetch(\"http://localhost:8000/api/blogs\",{method:\"POST\",headers:{// \"Content-Type\": \"multipart/form-data\",\nAuthorization:\"Bearer \"+JSON.parse(localStorage.getItem(\"user\")).token},body:blog});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong!\");throw error.message;}};const responseData=await response.json();return responseData;};const fetchBlogs=async()=>{console.log(\"Trying to grab all Blogs\");const response=await fetch(\"http://localhost:8000/api/blogs\",{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!response.ok){try{let res=await response.json();throw res.message||console.log(res);}catch(err){const error=new Error(\"Something went wrong\");throw new Error(error);}}const blogsApiData=await response.json();return blogsApiData;};const fetchBlogById=async id=>{const data=await fetch(\"http://localhost:8000/api/blogs/\"+id,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!data.ok){try{let blogsApiData=await data.json();throw blogsApiData.message;}catch(err){const error=new Error(\"Something went wrong\");throw new Error(error);}}const blogsApiData=await data.json();return blogsApiData;};const fetchBlogsByCategoryId=async categoryId=>{console.log(\"Trying to grab filtered blogs by cats ID\");console.log(\"http://localhost:8000/api/blogs/category/\"+categoryId);const data=await fetch(\"http://localhost:8000/api/blogs/category/\"+categoryId,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!data.ok){try{let res=await data.json();throw res.message||console.log(res);}catch(err){const error=new Error(\"Something went wrong\");throw new Error(error);}}const blogsApiData=await data.json();return blogsApiData;};const fetchBlogsByAuthorId=async authorId=>{console.log(\"Trying to grab filtered blogs by author's ID\");const data=await fetch(\"http://localhost:8000/api/blogs/author/\"+authorId,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!data.ok){try{let res=await data.json();throw res.message||console.log(res);}catch(err){const error=new Error(\"Something went wrong\");throw new Error(error);}}const responseData=await data.json();return responseData;};const updateBlog=async blog=>{const response=await fetch(\"http://localhost:8000/api/blogs/\"+blog.get(\"id\"),{method:\"PUT\",headers:{// \"Content-Type\": \"application/json\",\nAuthorization:\"Bearer \"+JSON.parse(localStorage.getItem(\"user\")).token},body:blog});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const deleteBlogById=async id=>{const response=await fetch(\"http://localhost:8000/api/blogs/\"+id,{method:\"DELETE\",headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \"+JSON.parse(localStorage.getItem(\"user\")).token}});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const blogService={createBlog,fetchBlogs,fetchBlogById,fetchBlogsByCategoryId,fetchBlogsByAuthorId,updateBlog,deleteBlogById};export default blogService;","map":{"version":3,"names":["createBlog","blog","response","fetch","method","headers","Authorization","JSON","parse","localStorage","getItem","token","body","ok","res","json","message","stringify","err","console","log","error","Error","responseData","fetchBlogs","blogsApiData","fetchBlogById","id","data","fetchBlogsByCategoryId","categoryId","fetchBlogsByAuthorId","authorId","updateBlog","get","deleteBlogById","blogService"],"sources":["/Users/erucuh/Downloads/Coding4Fun/IX/CapstoneBlogApp/BlogApp/frontend/src/services/blogService.js"],"sourcesContent":["\nconst createBlog = async (blog) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs\", \n    {\n      method: \"POST\",\n      headers: {\n        // \"Content-Type\": \"multipart/form-data\",\n        Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n      },\n      body: blog,\n    });\n\n    if (!response.ok) {\n      try {\n        let res = await response.json();\n        throw res.message || JSON.stringify(res);\n      } catch (err) {\n        console.log(err);\n        const error = new Error(\"Something went wrong!\");\n        throw error.message;\n      }\n    };\n\n    const responseData = await response.json();\n    return responseData;\n};\n\nconst fetchBlogs = async () => {\n  console.log(\"Trying to grab all Blogs\")\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs\",\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n  if (!response.ok) {\n    try {    \n      let res = await response.json();\n      throw res.message || console.log(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\")\n      throw new Error(error);\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogById = async (id) => {\n  const data = await fetch(\n    \"http://localhost:8000/api/blogs/\" + id,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n  if (!data.ok) {\n    try {\n      let blogsApiData = await data.json();\n      throw blogsApiData.message;\n    } catch (err) {\n      const error = new Error(\"Something went wrong\")\n      throw new Error(error);\n    }\n  }\n  \n  const blogsApiData = await data.json();\n  return blogsApiData;\n}\n\nconst fetchBlogsByCategoryId = async ( categoryId ) => {\n  console.log(\"Trying to grab filtered blogs by cats ID\")\n\n  console.log(\"http://localhost:8000/api/blogs/category/\" + categoryId);\n\n  const data = await fetch(\n    \"http://localhost:8000/api/blogs/category/\" + categoryId,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n\n    if (!data.ok) {\n      try {\n        let res = await data.json();\n        throw res.message || console.log(res);\n      } catch(err) {\n        const error = new Error(\"Something went wrong\");\n        throw new Error(error);\n      }\n    }\n    const blogsApiData = await data.json();\n    return blogsApiData;\n};\n\nconst fetchBlogsByAuthorId = async ( authorId ) => {\n  console.log(\"Trying to grab filtered blogs by author's ID\")\n\n  const data = await fetch(\n    (\"http://localhost:8000/api/blogs/author/\" + authorId),\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n  if (!data.ok) {\n    try {\n      let res = await data.json();\n      throw res.message || console.log(res);\n    } catch(err) {\n      const error = new Error(\"Something went wrong\");\n      throw new Error(error);\n    }\n  }\n\n  const responseData = await data.json();\n  return responseData;\n}\n\n\nconst updateBlog = async (blog) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + blog.get(\"id\"), {\n    method: \"PUT\",\n    headers: {\n      // \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n    },\n    body: blog,\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst deleteBlogById = async (id) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n    },\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst blogService = {\n  createBlog,\n  fetchBlogs, \n  fetchBlogById,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlog,\n  deleteBlogById,\n};\n  \n  export default blogService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}